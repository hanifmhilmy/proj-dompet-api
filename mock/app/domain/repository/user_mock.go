// Code generated by MockGen. DO NOT EDIT.
// Source: app/domain/repository/user.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/hanifmhilmy/proj-dompet-api/app/domain/model"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
)

// MockUserRepositoryInterface is a mock of UserRepositoryInterface interface
type MockUserRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryInterfaceMockRecorder
}

// MockUserRepositoryInterfaceMockRecorder is the mock recorder for MockUserRepositoryInterface
type MockUserRepositoryInterfaceMockRecorder struct {
	mock *MockUserRepositoryInterface
}

// NewMockUserRepositoryInterface creates a new mock instance
func NewMockUserRepositoryInterface(ctrl *gomock.Controller) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindAccount mocks base method
func (m *MockUserRepositoryInterface) FindAccount(uname, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccount", uname, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccount indicates an expected call of FindAccount
func (mr *MockUserRepositoryInterfaceMockRecorder) FindAccount(uname, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccount", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindAccount), uname, password)
}

// FindAccountDetail mocks base method
func (m *MockUserRepositoryInterface) FindAccountDetail(userID int64) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAccountDetail", userID)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAccountDetail indicates an expected call of FindAccountDetail
func (mr *MockUserRepositoryInterfaceMockRecorder) FindAccountDetail(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAccountDetail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).FindAccountDetail), userID)
}

// SaveAccount mocks base method
func (m *MockUserRepositoryInterface) SaveAccount(tx *sqlx.Tx, user, password string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", tx, user, password)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockUserRepositoryInterfaceMockRecorder) SaveAccount(tx, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SaveAccount), tx, user, password)
}

// SaveDetail mocks base method
func (m *MockUserRepositoryInterface) SaveDetail(tx *sqlx.Tx, userID int64, name, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDetail", tx, userID, name, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDetail indicates an expected call of SaveDetail
func (mr *MockUserRepositoryInterfaceMockRecorder) SaveDetail(tx, userID, name, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDetail", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SaveDetail), tx, userID, name, email)
}

// GetAccessDetails mocks base method
func (m *MockUserRepositoryInterface) GetAccessDetails(userUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessDetails", userUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAccessDetails indicates an expected call of GetAccessDetails
func (mr *MockUserRepositoryInterfaceMockRecorder) GetAccessDetails(userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessDetails", reflect.TypeOf((*MockUserRepositoryInterface)(nil).GetAccessDetails), userUUID)
}

// SetAccessDetails mocks base method
func (m *MockUserRepositoryInterface) SetAccessDetails(details model.AccessDetails, expireAccess, expireRefresh int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccessDetails", details, expireAccess, expireRefresh)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccessDetails indicates an expected call of SetAccessDetails
func (mr *MockUserRepositoryInterfaceMockRecorder) SetAccessDetails(details, expireAccess, expireRefresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccessDetails", reflect.TypeOf((*MockUserRepositoryInterface)(nil).SetAccessDetails), details, expireAccess, expireRefresh)
}
