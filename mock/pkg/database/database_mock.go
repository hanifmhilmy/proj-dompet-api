// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	database "github.com/hanifmhilmy/proj-dompet-api/pkg/database"
	reflect "reflect"
)

// MockDBConnInterface is a mock of DBConnInterface interface
type MockDBConnInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnInterfaceMockRecorder
}

// MockDBConnInterfaceMockRecorder is the mock recorder for MockDBConnInterface
type MockDBConnInterfaceMockRecorder struct {
	mock *MockDBConnInterface
}

// NewMockDBConnInterface creates a new mock instance
func NewMockDBConnInterface(ctrl *gomock.Controller) *MockDBConnInterface {
	mock := &MockDBConnInterface{ctrl: ctrl}
	mock.recorder = &MockDBConnInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBConnInterface) EXPECT() *MockDBConnInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDBConnInterface) Connect(names []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", names)
}

// Connect indicates an expected call of Connect
func (mr *MockDBConnInterfaceMockRecorder) Connect(names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBConnInterface)(nil).Connect), names)
}

// GetDB mocks base method
func (m *MockDBConnInterface) GetDB(name string) (database.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", name)
	ret0, _ := ret[0].(database.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB
func (mr *MockDBConnInterfaceMockRecorder) GetDB(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBConnInterface)(nil).GetDB), name)
}
